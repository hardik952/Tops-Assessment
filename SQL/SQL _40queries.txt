CREATE DATABASE customer;

CREATE TABLE salesman(salesman_id INT,
                      name VARCHAR(100),
                      city VARCHAR(100),
                      commission FLOAT, 
                      PRIMARY KEY(SALESMAN_ID));

INSERT INTO salesman(salesman_id,name,city,commission)
            VALUES(5001,"James Hoog","New York",0.15),
                  (5002,"Nail Knite","Paris",0.13),
                  (5005,"Pit Alex","London",0.11),
                  (5006,"Mc Lyon","Paris",0.14),
                  (5007,"Paul Adam","Rome",0.13),
                  (5003,"Lauson Hen","San Jose",0.12);

CREATE TABLE customer(customer_no int,
                      cust_name varchar(100),
                      city varchar(100),
                      grad int,
                      salesman_id int,
                      PRIMARY KEY(customer_id),
                      FOREIGN KEY(salesman_id)REFERENCES salesman(salesman_id));

INSERT INTO customer(customer_id,cust_name,city,grad,salesman_id)
            values(3001,"Nick Rimando","New York",100,5001),
            (3007,"Brad Davis","New York",200,5001),
            (3005,"Graham Zusi","California",200,5002),
            (3008,"Julian Green","London",300,5002),
            (3004,"Fabian Johnson","Paris",300,5006),
            (3009,"Geoff Cameron","Berlin",100,5003),
            (3003,"Jozy Altidor","Moscow",200,5007),
            (3001,"Brad Guzam","London",100,5005);

CREATE TABLE orders(order_no int,
                    pruch_amt float,
                    order_date date,
                    customer_id int,
                    salesman_id int,
                    PRIMARY KEY(order_no),
                    FOREIGN KEY(customer_id)REFERENCES customer(customer_id),
                    FOREIGN KEY(salesman_id)REFERENCES salesman(salesman_id));

INSERT INTO orders(order_no,pruch_amt,order_date,customer_id,salesman_id) 
            VALUES(70001,150.5,2012-10-05,3005,5002),
                  (70009,270.65,2012-09-10,3001,5005),
                  (70002,65.26,2012-10-05,3002,5001),
                  (70004,110.5,2012-08-17,3009,5003),
                  (70007,948.5,2012-09-12,3005,5002),
                  (70005,2400.6,2012-07-27,3007,5001),
                  (70008,5760,2012-09-10,3002,5001),
                  (70010,1983.43,2012-10-10,3004,5006),
                  (70003,2480.4,2012-10-10,3009,5003),
                  (70012,250.45,2012-06-27,3008,5002),
                  (70011,75.29,2012-08-17,3003,5007),
                  (70013,3045.6,2012-04-25,3002,5001);

SQL Queries: 

1)  SQL statement that displays all the information about all salespeople.
=> SELECT * FROM salesman;

2)  From the salseman table, write a SQL query to locate salespeople who live in the city of 'Paris'. Return salesperson's name, city.
=> SELECT name,city FROM salesman WHERE city='Paris';

3)  From the orders table, write a SQL query to identify the unique salespeople ID. Return salesman_id.
=> SELECT DISTINCT salesman_id FROM orders;

4)  From the customer table, write a SQL query to find customers whose grade is 200. Return customer_id, cust_name, city, grade, salesman_id.
=> SELECT * FROM customer WHERE grade=200;

5)  From the order table, write a SQL query to find orders that are delivered by a salesperson with ID. 5001. Return ord_no, ord_date, purch_amt.
=> SELECT order_no,odrer_date,purch_amt FROM orders WHERE salesman_id=5001;

6)  From the customer table, write a SQL query to locate the details of customers with grade values above 100. 
Return customer_id, cust_name, city, grade, and salesman_id.
=> SELECT * FROM customer WHERE grade>100;

7)  From the customer table, write a SQL query to find all the customers in ‘New York’ city who have a grade value above 100. 
Return customer_id, cust_name, city, grade, and salesman_id.
=> SELECT * FROM customer WHERE grade>100 AND city='New York';

8)  SQL statement to display specific columns such as cust_names and grad for all customer.  
=> SELECT cust_name,grad FROM customer;	

9)  SQL query to find customers who are from the city of New York or have a grade of over 100. Return customer_id, cust_name, city, grade, and salesman_id.  
=> SELECT * FROM customer WHERE city="New York" OR grad>100;

10) SQL query to find customers who are either from the city 'New York' or who do not have a grade greater than 100.
    Return customer_id, cust_name, city, grade, and salesman_id.
=>  SELECT * FROM customer WHERE city="New York" OR grad<=100;

11) From the following table, write a SQL query to identify customers who do not belong to the city of 'New York' or have a grade value that exceeds 100. 
    Return customer_id, cust_name, city, grade, and salesman_id.
=> SELECT * FROM customer WHERE NOT(city="New York" OR grad>100);

12) From the following table, write a SQL query to find details of all orders excluding those with ord_date equal to '2012-09-10' and salesman_id higher than 5005 
    or purch_amt greater than 1000. Return ord_no, purch_amt, ord_date, customer_id and salesman_id.  
=>  SELECT * FROM orders WHERE NOT(order_date="2012-09-10" AND salesman_id>5005 AND pruch_amt>1000);

13) From the following table, write a SQL query to find the details of those salespeople whose commissions range from 0.10 to 0.12.
    Return salesman_id, name, city, and commission. 
=>  SELECT * FROM salesman WHERE commission BETWEEN 0.10 AND 0.12;

14) From the following table, write a SQL query to find the details of those salespeople whose commissions range from 0.10 to0.12.
    Return salesman_id, name, city, and commission.
=>  SELECT * FROM salesman WHERE (commission>0.10 AND commission<0.12);             

15) From the following table, write a SQL query to find details of all orders with a purchase amount less than 200 or exclude orders with   
    an order date greater than or equal to '2012-02-10' and a customer ID less than 3009.Return ord_no, purch_amt, ord_date, customer_id and salesman_id.
=>  SELECT * FROM  orders WHERE(purch_amt<200 OR NOT(order_date>=2012-02-10 AND customer_id<3009)); 

16) From the following table, write a SQL query to find all orders that meet the following conditions.
    Exclude combinations of order date equal to '2012-08-17' or customer ID greater than 3005 and purchase amount less than 1000.
=>  SELECT * FROM  orders WHERE NOT((ord_date ='2012-08-17' OR customer_id>3005) AND purch_amt<1000);

17) Write a SQL query that displays order number, purchase amount, and
    the achieved and unachieved percentage (%) for those orders that exceed 50% of the target value of 6000.
=> SELECT ord_no,purch_amt, (100*purch_amt)/6000 AS "Achieved %",(100*(6000-purch_amt)/6000) AS "Unachieved %" FROM  orders WHERE (100*purch_amt)/6000>50;

18) From the following table, write a SQL query to find the details of those salespeople who come from the 'Paris' City or 'Rome' City.
    Return salesman_id, name, city, commission.
=> SELECT * FROM salesman WHERE city = 'Paris' OR city = 'Rome';

19) From the following table, write a SQL query to find the details of the salespeople who come from either 'Paris' or 'Rome'.
    Return salesman_id, name, city, commission. 
=>  SELECT *FROM salesman WHERE city IN('Paris','Rome');
 
20) From the following table, write a SQL query to find the details of those salespeople who live in cities other than Paris and Rome.
    Return salesman_id, name, city, commission.
=>  SELECT * FROM salesman WHERE city NOT IN('Paris','Rome');

21) From the following table, write a SQL query to retrieve the details of all customers whose ID belongs to any of the values 3007, 3008 or 3009.
    Return customer_id, cust_name, city, grade, and salesman_id.  
=>  SELECT * FROM customer WHERE customer_id IN (3007,3008,3009);

22) From the following table, write a SQL query to find salespeople who receive commissions between 0.12 and 0.14 (begin and end values are included).
    Return salesman_id, name, city, and commission.  
=>  SELECT * FROM salesman WHERE commission BETWEEN 0.12 AND 0.14;
  
23) From the following table, write a SQL query to select orders between 500 and 4000 (begin and end values are included). 
    Exclude orders amount 948.50 and 1983.43 .Return ord_no, purch_amt, ord_date, customer_id, and salesman_id. 
=>  SELECT * FROM orders WHERE (purch_amt BETWEEN 500 AND 4000) AND NOT purch_amt IN(948.50,1983.43);

24) From the following table, write a SQL query to retrieve the details of the salespeople whose names begin with 
    any letter between 'A' and 'L' (not inclusive). Return salesman_id, name, city, commission. 
=>  SELECT * FROM salesman WHERE name BETWEEN 'A' and 'L';

25) From the following table, write a SQL query to find the details of all salespeople except those whose names begin with
    any letter between 'A' and 'L' (not inclusive). Return salesman_id, name, city, commission.  
=>  SELECT * FROM salesman WHERE name NOT BETWEEN 'A' and 'L';

26) From the following table, write a SQL query to retrieve the details of the customers whose names begins with the letter 'B'. 
    Return customer_id, cust_name, city, grade, salesman_id..
=>  SELECT * FROM customer WHERE cust_name LIKE 'B%';

27) From the following table, write a SQL query to find the details of the customers whose names end with the letter 'n'. 
    Return customer_id, cust_name, city, grade, salesman_id.
=>  SELECT * FROM customer WHERE cust_name LIKE '%n';
 

28) From the following table, write a SQL query to find the details of those salespeople whose names begin with ‘N’ and the fourth character is 'l'. 
    Rests may be any character. Return salesman_id, name, city, commission.
=>  SELECT * FROM salesman WHERE name LIKE 'N__l%';

29) From the following table, write a SQL query to calculate total purchase amount of all orders. Return total purchase amount.
=>  SELECT SUM (purch_amt) FROM orders;
 
30) From the following table, write a SQL query to calculate the average purchase amount of all orders. Return average purchase amount. 
=>  SELECT AVG (purch_amt) FROM orders;

31) From the following table, write a SQL query that counts the number of unique salespeople. Return number of salespeople.  
=>  SELECT COUNT (DISTINCT salesman_id) FROM orders;

32) From the following table, write a SQL query to count the number of customers. Return number of customers.  
=>  SELECT COUNT(*) FROM customer;

33) From the following table, write a SQL query to determine the number of customers who received at least one grade for their activity.
=>  SELECT COUNT (ALL grade) FROM customer;

34) From the following table, write a SQL query to find the maximum purchase amount.
=>  SELECT MAX (purch_amt) FROM orders;

35) From the following table, write a SQL query to find the highest grade of the customers in each city. Return city, maximum grade.  
=>  SELECT city,MAX(grade) FROM customer GROUP BY city;

36) From the following table, write a SQL query to find the highest purchase amount ordered by each customer on a particular date.
    Return, order date and highest purchase amount.
=>  SELECT customer_id,ord_date,MAX(purch_amt) FROM orders GROUP BY customer_id,ord_date;

37) From the following table, write a SQL query to determine the highest purchase amount made by each salesperson on '2012-08-17'.
    Return salesperson ID, purchase amount 
=>  SELECT salesman_id,MAX(purch_amt) FROM orders WHERE ord_date = '2012-08-17' GROUP BY salesman_id;

38) From the following table, write a SQL query to find the maximum order (purchase) amount in the range 2000 - 6000 (Begin and end values are included.) 
    by combination of each customer and order date. Return customer id, order date and maximum purchase amount.
=>  SELECT customer_id,ord_date,MAX(purch_amt) FROM orders GROUP BY customer_id,ord_date HAVING MAX(purch_amt) BETWEEN 2000 AND 6000;

39) From the following table, write a SQL query to find the maximum order (purchase) amount based on the combination of each customer and order date.
    Filter the rows for maximum order (purchase) amount is either 2000, 3000, 5760, 6000. Return customer id, order date and maximum purchase amount.
=>  SELECT customer_id,ord_date,MAX(purch_amt) FROM orders GROUP BY customer_id,ord_date HAVING MAX(purch_amt) IN(2000 ,3000,5760, 6000);

40) From the following table, write a SQL query to determine the maximum order amount for each customer.The customer ID should be in the range 3002 and 
    3007(Begin and end values are included.). Return customer id and maximum purchase amount.
=>  SELECT customer_id,MAX(purch_amt) FROM orders WHERE customer_id BETWEEN 3002 and 3007 GROUP BY customer_id;    